=======================================
INICIO FICHERO >> ./Dockerfile
=======================================
# Dockerfile para app web sin dependencias externas
FROM node:18-alpine

WORKDIR /app

COPY ./server ./server
COPY ./public ./public

RUN npm install express

EXPOSE 3000

CMD ["node", "server/server.js"]
=======================================
FIN FICHERO >> ./Dockerfile
=======================================

=======================================
INICIO FICHERO >> ./docker-compose.yml
=======================================
version: '3.8'
services:
  webapp:
    build: .
    ports:
      - "3000:3000"
    volumes:
      - ./public:/app/public
      - ./server:/app/server
    restart: unless-stopped
=======================================
FIN FICHERO >> ./docker-compose.yml
=======================================

=======================================
INICIO FICHERO >> ./server/server.js
=======================================
// Servidor web básico en Node.js + Express
const express = require('express');
const path = require('path');

const app = express();
const port = 3000;

app.use(express.static(path.join(__dirname, '../public')));

app.get('/', (req, res) => res.sendFile(path.join(__dirname, '../public/index.html')));
app.get('/login', (req, res) => res.sendFile(path.join(__dirname, '../public/login.html')));
app.get('/profile', (req, res) => res.sendFile(path.join(__dirname, '../public/profile.html')));
app.get('/settings', (req, res) => res.sendFile(path.join(__dirname, '../public/settings.html')));

app.listen(port, () => {
  console.log(`App corriendo en http://localhost:${port}`);
});
=======================================
FIN FICHERO >> ./server/server.js
=======================================

=======================================
INICIO FICHERO >> ./public/index.html
=======================================
<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <title>Inicio</title>
</head>
<body>
  <h1 qa-id="title-home">Bienvenido a la App QA</h1>
  <nav>
    <a href="/login" qa-id="nav-login">Login</a> |
    <a href="/profile" qa-id="nav-profile">Perfil</a> |
    <a href="/settings" qa-id="nav-settings">Configuración</a>
  </nav>
  <button qa-id="home-refresh-btn" onclick="alert('Refrescando...')">Refrescar</button>
</body>
</html>
=======================================
FIN FICHERO >> ./public/index.html
=======================================

=======================================
INICIO FICHERO >> ./public/login.html
=======================================
<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <title>Login</title>
</head>
<body>
  <h1 qa-id="title-login">Iniciar Sesión</h1>
  <form qa-id="form-login">
    <input type="text" name="username" placeholder="Usuario" qa-id="input-username" /><br/>
    <input type="password" name="password" placeholder="Contraseña" qa-id="input-password" /><br/>
    <button type="submit" qa-id="btn-login">Entrar</button>
  </form>
  <a href="/" qa-id="back-home">Volver al Inicio</a>
</body>
</html>
=======================================
FIN FICHERO >> ./public/login.html
=======================================

=======================================
INICIO FICHERO >> ./public/profile.html
=======================================
<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <title>Perfil</title>
</head>
<body>
  <h1 qa-id="title-profile">Tu Perfil</h1>
  <p qa-id="user-info">Nombre: Juan QA</p>
  <button qa-id="btn-edit-profile" onclick="alert('Editar perfil próximamente')">Editar</button>
  <a href="/" qa-id="back-home">Volver al Inicio</a>
</body>
</html>
=======================================
FIN FICHERO >> ./public/profile.html
=======================================

=======================================
INICIO FICHERO >> ./public/settings.html
=======================================
<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <title>Configuración</title>
</head>
<body>
  <h1 qa-id="title-settings">Configuración</h1>
  <label qa-id="label-darkmode">
    <input type="checkbox" qa-id="toggle-darkmode" /> Modo Oscuro
  </label><br/>
  <label qa-id="label-lang">
    Idioma:
    <select qa-id="select-language">
      <option value="es">Español</option>
      <option value="en">English</option>
    </select>
  </label><br/>
  <a href="/" qa-id="back-home">Volver al Inicio</a>
</body>
</html>
=======================================
FIN FICHERO >> ./public/settings.html
=======================================



V2
=======================================
INICIO FICHERO >> ./Dockerfile
=======================================
# Dockerfile para app QA extendida
FROM node:18-alpine

WORKDIR /app

COPY ./server ./server
COPY ./public ./public

RUN npm install express

EXPOSE 3000

CMD ["node", "server/server.js"]
=======================================
FIN FICHERO >> ./Dockerfile
=======================================

=======================================
INICIO FICHERO >> ./docker-compose.yml
=======================================
version: '3.8'
services:
  webapp:
    build: .
    ports:
      - "3000:3000"
    volumes:
      - ./public:/app/public
      - ./server:/app/server
    restart: unless-stopped
=======================================
FIN FICHERO >> ./docker-compose.yml
=======================================

=======================================
INICIO FICHERO >> ./server/server.js
=======================================
const express = require('express');
const path = require('path');
const app = express();
const port = 3000;

app.use(express.static(path.join(__dirname, '../public')));

const routes = [
  '/', '/login', '/profile', '/settings',
  '/dashboard', '/tasks', '/components', '/forms'
];

routes.forEach(route => {
  app.get(route, (req, res) => {
    res.sendFile(path.join(__dirname, `../public${route === '/' ? '/index' : route}.html`));
  });
});

app.listen(port, () => {
  console.log(`App corriendo en http://localhost:${port}`);
});
=======================================
FIN FICHERO >> ./server/server.js
=======================================

=======================================
INICIO FICHERO >> ./public/index.html
=======================================
<!DOCTYPE html>
<html lang="es">
<head><meta charset="UTF-8"><title>Inicio</title></head>
<body>
  <h1 qa-id="title-home">Inicio</h1>
  <nav qa-id="nav-home">
    <a href="/login" qa-id="nav-login">Login</a> |
    <a href="/profile" qa-id="nav-profile">Perfil</a> |
    <a href="/settings" qa-id="nav-settings">Config</a> |
    <a href="/dashboard" qa-id="nav-dashboard">Dashboard</a> |
    <a href="/tasks" qa-id="nav-tasks">Tareas</a> |
    <a href="/components" qa-id="nav-components">Componentes</a> |
    <a href="/forms" qa-id="nav-forms">Formularios</a>
  </nav>
  <button qa-id="btn-refresh-home" onclick="location.reload()">Refrescar</button>
</body>
</html>
=======================================
FIN FICHERO >> ./public/index.html
=======================================

=======================================
INICIO FICHERO >> ./public/login.html
=======================================
<!DOCTYPE html>
<html lang="es">
<head><meta charset="UTF-8"><title>Login</title></head>
<body>
  <h1 qa-id="title-login">Iniciar sesión</h1>
  <form qa-id="form-login">
    <input qa-id="input-user" type="text" placeholder="Usuario" /><br>
    <input qa-id="input-pass" type="password" placeholder="Contraseña" /><br>
    <button qa-id="btn-login" type="submit">Entrar</button>
  </form>
  <a href="/" qa-id="link-home">Inicio</a>
</body>
</html>
=======================================
FIN FICHERO >> ./public/login.html
=======================================

=======================================
INICIO FICHERO >> ./public/profile.html
=======================================
<!DOCTYPE html>
<html lang="es">
<head><meta charset="UTF-8"><title>Perfil</title></head>
<body>
  <h1 qa-id="title-profile">Perfil de Usuario</h1>
  <p qa-id="user-name">Nombre: QA Tester</p>
  <p qa-id="user-email">Email: qa@example.com</p>
  <button qa-id="btn-edit-profile">Editar</button>
  <a href="/" qa-id="link-home">Inicio</a>
</body>
</html>
=======================================
FIN FICHERO >> ./public/profile.html
=======================================

=======================================
INICIO FICHERO >> ./public/settings.html
=======================================
<!DOCTYPE html>
<html lang="es">
<head><meta charset="UTF-8"><title>Configuración</title></head>
<body>
  <h1 qa-id="title-settings">Configuración</h1>
  <label qa-id="label-mode">
    <input type="checkbox" qa-id="input-darkmode"> Modo Oscuro
  </label><br>
  <label qa-id="label-lang">
    Idioma:
    <select qa-id="select-language">
      <option value="es">Español</option>
      <option value="en">Inglés</option>
    </select>
  </label><br>
  <a href="/" qa-id="link-home">Inicio</a>
</body>
</html>
=======================================
FIN FICHERO >> ./public/settings.html
=======================================

=======================================
INICIO FICHERO >> ./public/dashboard.html
=======================================
<!DOCTYPE html>
<html lang="es">
<head><meta charset="UTF-8"><title>Dashboard</title></head>
<body>
  <h1 qa-id="title-dashboard">Dashboard</h1>
  <div qa-id="stat-users">👤 Usuarios activos: 123</div>
  <div qa-id="stat-uptime">🕒 Uptime: 99.98%</div>
  <canvas id="chart" qa-id="chart-placeholder" width="300" height="150" style="border:1px solid #000"></canvas>
  <a href="/" qa-id="link-home">Inicio</a>
</body>
</html>
=======================================
FIN FICHERO >> ./public/dashboard.html
=======================================

=======================================
INICIO FICHERO >> ./public/tasks.html
=======================================
<!DOCTYPE html>
<html lang="es">
<head><meta charset="UTF-8"><title>Tareas</title></head>
<body>
  <h1 qa-id="title-tasks">Tareas</h1>
  <table border="1" qa-id="table-tasks">
    <thead>
      <tr>
        <th>ID</th><th>Descripción</th><th>Acciones</th>
      </tr>
    </thead>
    <tbody>
      <tr qa-id="task-1">
        <td>1</td><td>Crear pruebas E2E</td>
        <td><button qa-id="btn-edit-1">Editar</button></td>
      </tr>
      <tr qa-id="task-2">
        <td>2</td><td>QA visual</td>
        <td><button qa-id="btn-edit-2">Editar</button></td>
      </tr>
    </tbody>
  </table>
  <a href="/" qa-id="link-home">Inicio</a>
</body>
</html>
=======================================
FIN FICHERO >> ./public/tasks.html
=======================================

=======================================
INICIO FICHERO >> ./public/components.html
=======================================
<!DOCTYPE html>
<html lang="es">
<head><meta charset="UTF-8"><title>Componentes</title>
<script>
function toggleModal() {
  const modal = document.getElementById('modal');
  modal.style.display = modal.style.display === 'block' ? 'none' : 'block';
}
</script>
</head>
<body>
  <h1 qa-id="title-components">Componentes UI</h1>

  <div qa-id="tabs">
    <button qa-id="tab-1">Tab 1</button>
    <button qa-id="tab-2">Tab 2</button>
    <div qa-id="tab-content">Contenido aquí...</div>
  </div>

  <button onclick="toggleModal()" qa-id="btn-open-modal">Abrir Modal</button>
  <div id="modal" qa-id="modal" style="display:none;border:1px solid black;padding:10px">
    <p qa-id="modal-content">Este es un modal</p>
    <button onclick="toggleModal()" qa-id="btn-close-modal">Cerrar</button>
  </div>

  <details qa-id="collapsible">
    <summary qa-id="collapsible-summary">Más información</summary>
    <p qa-id="collapsible-content">Contenido colapsable</p>
  </details>

  <a href="/" qa-id="link-home">Inicio</a>
</body>
</html>
=======================================
FIN FICHERO >> ./public/components.html
=======================================

=======================================
INICIO FICHERO >> ./public/forms.html
=======================================
<!DOCTYPE html>
<html lang="es">
<head><meta charset="UTF-8"><title>Formularios</title></head>
<body>
  <h1 qa-id="title-forms">Formulario Completo</h1>
  <form qa-id="form-register">
    <input type="text" placeholder="Nombre" qa-id="input-name"><br>
    <input type="email" placeholder="Email" qa-id="input-email"><br>
    <input type="date" qa-id="input-date"><br>
    <select qa-id="select-role">
      <option value="admin">Admin</option>
      <option value="qa">QA</option>
    </select><br>
    <button type="submit" qa-id="btn-submit-form">Enviar</button>
  </form>
  <a href="/" qa-id="link-home">Inicio</a>
</body>
</html>
=======================================
FIN FICHERO >> ./public/forms.html
=======================================


v3

=======================================
INICIO FICHERO >> ./Dockerfile
=======================================
FROM node:18-alpine
WORKDIR /app
COPY ./server ./server
COPY ./public ./public
RUN npm install express
EXPOSE 3000
CMD ["node", "server/server.js"]
=======================================
FIN FICHERO >> ./Dockerfile
=======================================

=======================================
INICIO FICHERO >> ./docker-compose.yml
=======================================
version: '3.8'
services:
  webapp:
    build: .
    ports:
      - "3000:3000"
    volumes:
      - ./public:/app/public
      - ./server:/app/server
    restart: unless-stopped
=======================================
FIN FICHERO >> ./docker-compose.yml
=======================================

=======================================
INICIO FICHERO >> ./server/server.js
=======================================
const express = require('express');
const path = require('path');
const app = express();
const port = 3000;

app.use(express.static(path.join(__dirname, '../public')));

const routes = [
  '/', '/login', '/profile', '/settings',
  '/dashboard', '/tasks', '/components', '/forms',
  '/about', '/support', '/history'
];

routes.forEach(route => {
  app.get(route, (req, res) => {
    res.sendFile(path.join(__dirname, `../public${route === '/' ? '/index' : route}.html`));
  });
});

app.listen(port, () => {
  console.log(`App corriendo en http://localhost:${port}`);
});
=======================================
FIN FICHERO >> ./server/server.js
=======================================

=======================================
INICIO FICHERO >> ./public/logger.js
=======================================
// Logger frontend simple, almacena en localStorage
window.logEvent = function(action, detail) {
  const entry = {
    timestamp: new Date().toISOString(),
    action,
    detail
  };
  const logs = JSON.parse(localStorage.getItem('qa_logs') || '[]');
  logs.push(entry);
  localStorage.setItem('qa_logs', JSON.stringify(logs));
  console.log('[QA LOG]', entry);
}
=======================================
FIN FICHERO >> ./public/logger.js
=======================================

=======================================
INICIO FICHERO >> ./public/index.html
=======================================
<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <title>Inicio</title>
  <script src="logger.js"></script>
</head>
<body>
  <h1 qa-id="title-home">Inicio</h1>
  <nav qa-id="nav-home">
    <a href="/login" qa-id="nav-login">Login</a> |
    <a href="/profile" qa-id="nav-profile">Perfil</a> |
    <a href="/settings" qa-id="nav-settings">Config</a> |
    <a href="/dashboard" qa-id="nav-dashboard">Dashboard</a> |
    <a href="/tasks" qa-id="nav-tasks">Tareas</a> |
    <a href="/components" qa-id="nav-components">Componentes</a> |
    <a href="/forms" qa-id="nav-forms">Formularios</a> |
    <a href="/about" qa-id="nav-about">Acerca</a> |
    <a href="/support" qa-id="nav-support">Soporte</a> |
    <a href="/history" qa-id="nav-history">Historial</a>
  </nav>
  <button qa-id="btn-refresh-home" onclick="logEvent('refresh', 'home'); location.reload()">Refrescar</button>
</body>
</html>
=======================================
FIN FICHERO >> ./public/index.html
=======================================

=======================================
INICIO FICHERO >> ./public/about.html
=======================================
<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <title>Acerca de</title>
  <script src="logger.js"></script>
</head>
<body>
  <h1 qa-id="title-about">Acerca de la Aplicación</h1>
  <p qa-id="about-description">
    Esta aplicación fue construida para pruebas QA E2E intensivas.
  </p>
  <ul qa-id="about-features">
    <li>Dockerizado</li>
    <li>QA-ID en todos los elementos</li>
    <li>Logging incorporado</li>
  </ul>
  <button onclick="logEvent('about', 'Visited Acerca de')" qa-id="btn-log-about">Log Visita</button>
  <a href="/" qa-id="link-home">Inicio</a>
</body>
</html>
=======================================
FIN FICHERO >> ./public/about.html
=======================================

=======================================
INICIO FICHERO >> ./public/support.html
=======================================
<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <title>Soporte</title>
  <script src="logger.js"></script>
</head>
<body>
  <h1 qa-id="title-support">Soporte</h1>
  <details qa-id="faq-1">
    <summary qa-id="faq-1-summary">¿Cómo iniciar sesión?</summary>
    <p qa-id="faq-1-answer">Dirígete a /login y usa tus credenciales.</p>
  </details>
  <details qa-id="faq-2">
    <summary qa-id="faq-2-summary">¿Cómo reporto un bug?</summary>
    <p qa-id="faq-2-answer">Contacta a soporte QA vía email.</p>
  </details>
  <button onclick="logEvent('faq', 'Revisó soporte')" qa-id="btn-log-support">Log Soporte</button>
  <a href="/" qa-id="link-home">Inicio</a>
</body>
</html>
=======================================
FIN FICHERO >> ./public/support.html
=======================================

=======================================
INICIO FICHERO >> ./public/history.html
=======================================
<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <title>Historial de Logs</title>
  <script src="logger.js"></script>
  <script>
    function loadLogs() {
      const container = document.getElementById('logs');
      const logs = JSON.parse(localStorage.getItem('qa_logs') || '[]');
      container.innerHTML = logs.map(l => `<li>${l.timestamp} - ${l.action} - ${l.detail}</li>`).join('');
    }
    window.onload = loadLogs;
  </script>
</head>
<body>
  <h1 qa-id="title-history">Historial QA Logs</h1>
  <ul id="logs" qa-id="logs-list"></ul>
  <button onclick="localStorage.removeItem('qa_logs'); loadLogs()" qa-id="btn-clear-logs">Limpiar Logs</button>
  <a href="/" qa-id="link-home">Inicio</a>
</body>
</html>
=======================================
FIN FICHERO >> ./public/history.html
=======================================
v4

=======================================
INICIO FICHERO >> ./Dockerfile
=======================================
FROM node:18-alpine
WORKDIR /app
COPY ./server ./server
COPY ./public ./public
RUN npm install express
EXPOSE 3000
CMD ["node", "server/server.js"]
=======================================
FIN FICHERO >> ./Dockerfile
=======================================

=======================================
INICIO FICHERO >> ./docker-compose.yml
=======================================
version: '3.8'
services:
  webapp:
    build: .
    ports:
      - "3000:3000"
    volumes:
      - ./public:/app/public
      - ./server:/app/server
    restart: unless-stopped
=======================================
FIN FICHERO >> ./docker-compose.yml
=======================================

=======================================
INICIO FICHERO >> ./server/server.js
=======================================
const express = require('express');
const path = require('path');
const fs = require('fs');
const app = express();
const port = 3000;

app.use(express.static(path.join(__dirname, '../public')));
app.use(express.json());

const routes = [
  '/', '/login', '/profile', '/settings',
  '/dashboard', '/tasks', '/components', '/forms',
  '/about', '/support', '/history'
];

routes.forEach(route => {
  app.get(route, (req, res) => {
    res.sendFile(path.join(__dirname, `../public${route === '/' ? '/index' : route}.html`));
  });
});

// Persistencia de logs
const logsPath = path.join(__dirname, 'logs.json');
if (!fs.existsSync(logsPath)) fs.writeFileSync(logsPath, '[]');

app.post('/api/log', (req, res) => {
  const logs = JSON.parse(fs.readFileSync(logsPath));
  logs.push({ ...req.body, timestamp: new Date().toISOString() });
  fs.writeFileSync(logsPath, JSON.stringify(logs, null, 2));
  res.status(201).json({ ok: true });
});

app.get('/api/logs', (req, res) => {
  const logs = JSON.parse(fs.readFileSync(logsPath));
  res.json(logs);
});

app.listen(port, () => {
  console.log(`App corriendo en http://localhost:${port}`);
});
=======================================
FIN FICHERO >> ./server/server.js
=======================================

=======================================
INICIO FICHERO >> ./server/logs.json
=======================================
[]
=======================================
FIN FICHERO >> ./server/logs.json
=======================================

=======================================
INICIO FICHERO >> ./public/logger.js
=======================================
// Logger persistente
window.logEvent = function(action, detail) {
  const payload = {
    action,
    detail,
    user: JSON.parse(localStorage.getItem("user") || '{}').username || 'anon'
  };
  fetch('/api/log', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(payload)
  }).then(() => console.log('[QA LOG]', payload));
};
=======================================
FIN FICHERO >> ./public/logger.js
=======================================

=======================================
INICIO FICHERO >> ./public/profile.html
=======================================
<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <title>Perfil</title>
  <script src="logger.js"></script>
  <script>
    const user = JSON.parse(localStorage.getItem("user"));
    if (!user) location.href = '/login';

    window.onload = () => {
      document.getElementById("username").textContent = user.username;
    };

    function logout() {
      localStorage.removeItem("user");
      logEvent("logout", "Usuario cerró sesión");
      location.href = "/";
    }
  </script>
</head>
<body>
  <h1 qa-id="title-profile">Perfil</h1>
  <p qa-id="user-name">Usuario: <span id="username"></span></p>
  <button qa-id="btn-logout" onclick="logout()">Cerrar sesión</button>
  <a href="/" qa-id="link-home">Inicio</a>
</body>
</html>
=======================================
FIN FICHERO >> ./public/profile.html
=======================================

=======================================
INICIO FICHERO >> ./public/login.html
=======================================
<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <title>Login</title>
  <script src="logger.js"></script>
  <script>
    function login(e) {
      e.preventDefault();
      const username = document.getElementById('username').value;
      localStorage.setItem("user", JSON.stringify({ username, role: "qa" }));
      logEvent("login", "Usuario inició sesión");
      location.href = "/profile";
    }
  </script>
</head>
<body>
  <h1 qa-id="title-login">Iniciar sesión</h1>
  <form onsubmit="login(event)" qa-id="form-login">
    <input id="username" type="text" placeholder="Usuario" qa-id="input-user" required /><br>
    <input type="password" placeholder="Contraseña" qa-id="input-pass" required /><br>
    <button type="submit" qa-id="btn-login">Entrar</button>
  </form>
  <a href="/" qa-id="link-home">Inicio</a>
</body>
</html>
=======================================
FIN FICHERO >> ./public/login.html
=======================================

=======================================
INICIO FICHERO >> ./public/dashboard.html
=======================================
<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <title>Dashboard</title>
  <script src="logger.js"></script>
  <script src="/charts/chart.min.js"></script>
</head>
<body>
  <h1 qa-id="title-dashboard">Dashboard QA</h1>
  <canvas id="usersChart" qa-id="chart-users" width="400" height="200"></canvas>
  <script>
    const ctx = document.getElementById('usersChart').getContext('2d');
    new Chart(ctx, {
      type: 'bar',
      data: {
        labels: ['Lun', 'Mar', 'Mié', 'Jue', 'Vie'],
        datasets: [{
          label: 'Usuarios activos',
          data: [12, 19, 3, 5, 2],
          backgroundColor: 'blue'
        }]
      }
    });
    logEvent("dashboard", "Gráfico renderizado");
  </script>
  <a href="/" qa-id="link-home">Inicio</a>
</body>
</html>
=======================================
FIN FICHERO >> ./public/dashboard.html
=======================================

=======================================
INICIO FICHERO >> ./public/lang/i18n_es.js
=======================================
window.i18n = {
  title: "Formulario",
  name: "Nombre",
  email: "Correo",
  submit: "Enviar"
};
=======================================
FIN FICHERO >> ./public/lang/i18n_es.js
=======================================

=======================================
INICIO FICHERO >> ./public/lang/i18n_en.js
=======================================
window.i18n = {
  title: "Form",
  name: "Name",
  email: "Email",
  submit: "Submit"
};
=======================================
FIN FICHERO >> ./public/lang/i18n_en.js
=======================================

=======================================
INICIO FICHERO >> ./public/forms.html
=======================================
<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <title id="form-title">Formulario</title>
  <script src="logger.js"></script>
  <script>
    const lang = localStorage.getItem("lang") || "es";
    document.write(`<script src="/lang/i18n_${lang}.js"><\/script>`);
  </script>
</head>
<body>
  <h1 qa-id="title-forms" id="title-label"></h1>
  <form qa-id="form-register">
    <label><span id="label-name"></span><input type="text" qa-id="input-name"></label><br>
    <label><span id="label-email"></span><input type="email" qa-id="input-email"></label><br>
    <button type="submit" qa-id="btn-submit-form" id="btn-label"></button>
  </form>
  <script>
    window.onload = () => {
      document.getElementById('title-label').innerText = i18n.title;
      document.getElementById('label-name').innerText = i18n.name + ": ";
      document.getElementById('label-email').innerText = i18n.email + ": ";
      document.getElementById('btn-label').innerText = i18n.submit;
      logEvent("form_translate", lang);
    }
  </script>
  <a href="/" qa-id="link-home">Inicio</a>
</body>
</html>
=======================================
FIN FICHERO >> ./public/forms.html
=======================================
v5
=======================================
INICIO FICHERO >> ./Dockerfile
=======================================
FROM node:18-alpine

WORKDIR /app

COPY ./server ./server
COPY ./public ./public
COPY ./data ./data

RUN npm install express fs

EXPOSE 3000
CMD ["node", "server/server.js"]
=======================================
FIN FICHERO >> ./Dockerfile
=======================================

=======================================
INICIO FICHERO >> ./docker-compose.yml
=======================================
version: '3.8'
services:
  webapp:
    build: .
    ports:
      - "3000:3000"
    volumes:
      - ./public:/app/public
      - ./server:/app/server
      - ./data:/app/data
    restart: unless-stopped
=======================================
FIN FICHERO >> ./docker-compose.yml
=======================================

=======================================
INICIO FICHERO >> ./server/server.js
=======================================
// Servidor web backend con logs y roles
const express = require('express');
const path = require('path');
const fs = require('fs');

const app = express();
const port = 3000;
app.use(express.json());
app.use(express.static(path.join(__dirname, '../public')));

app.get('/', (_, res) => res.sendFile(path.join(__dirname, '../public/index.html')));
app.get('/login', (_, res) => res.sendFile(path.join(__dirname, '../public/login.html')));
app.get('/profile', (_, res) => res.sendFile(path.join(__dirname, '../public/profile.html')));
app.get('/settings', (_, res) => res.sendFile(path.join(__dirname, '../public/settings.html')));
app.get('/dashboard', (_, res) => res.sendFile(path.join(__dirname, '../public/dashboard.html')));
app.get('/admin', (_, res) => res.sendFile(path.join(__dirname, '../public/admin.html')));

// API: persistir logs
app.post('/api/logs', (req, res) => {
  const logEntry = req.body;
  const filePath = path.join(__dirname, '../data/logs.json');
  let logs = [];

  if (fs.existsSync(filePath)) {
    const content = fs.readFileSync(filePath);
    logs = JSON.parse(content);
  }

  logs.push({ timestamp: new Date().toISOString(), ...logEntry });
  fs.writeFileSync(filePath, JSON.stringify(logs, null, 2));
  res.json({ status: 'ok' });
});

app.listen(port, () => console.log(`App disponible en http://localhost:${port}`));
=======================================
FIN FICHERO >> ./server/server.js
=======================================

=======================================
INICIO FICHERO >> ./public/index.html
=======================================
<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8" />
  <title>Inicio</title>
  <script src="main.js"></script>
</head>
<body>
  <h1 qa-id="title-home" data-i18n="welcome">Bienvenido a la App QA</h1>
  <nav>
    <a href="/login" qa-id="nav-login" data-i18n="login">Login</a> |
    <a href="/profile" qa-id="nav-profile" data-i18n="profile">Perfil</a> |
    <a href="/settings" qa-id="nav-settings" data-i18n="settings">Configuración</a> |
    <a href="/dashboard" qa-id="nav-dashboard" data-i18n="dashboard">Dashboard</a> |
    <a href="/admin" qa-id="nav-admin" data-i18n="admin">Admin</a>
  </nav>
  <button qa-id="home-refresh-btn" onclick="logAndAlert('Refrescando...')">Refrescar</button>
</body>
</html>
=======================================
FIN FICHERO >> ./public/index.html
=======================================

=======================================
INICIO FICHERO >> ./public/dashboard.html
=======================================
<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8" />
  <title>Dashboard</title>
  <script src="main.js"></script>
  <script src="chart.min.js"></script>
</head>
<body>
  <h1 qa-id="title-dashboard" data-i18n="dashboard_title">Dashboard de métricas</h1>
  <canvas id="myChart" width="400" height="200" qa-id="chart-usage"></canvas>
  <script>
    const ctx = document.getElementById('myChart').getContext('2d');
    new Chart(ctx, {
      type: 'bar',
      data: {
        labels: ['Login', 'Perfil', 'Admin', 'Settings'],
        datasets: [{
          label: 'Visitas',
          data: [12, 19, 3, 5],
          borderWidth: 1
        }]
      },
      options: {
        scales: { y: { beginAtZero: true } }
      }
    });
  </script>
</body>
</html>
=======================================
FIN FICHERO >> ./public/dashboard.html
=======================================

=======================================
INICIO FICHERO >> ./public/admin.html
=======================================
<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8" />
  <title>Panel Admin</title>
  <script src="main.js"></script>
</head>
<body>
  <h1 qa-id="title-admin" data-i18n="admin_panel">Panel de Administración</h1>
  <p qa-id="admin-welcome" data-i18n="admin_only">Solo accesible por administradores.</p>
  <script>
    const user = JSON.parse(localStorage.getItem("user"));
    if (!user || user.role !== "admin") {
      alert("Acceso denegado. Redirigiendo...");
      location.href = "/";
    }
  </script>
</body>
</html>
=======================================
FIN FICHERO >> ./public/admin.html
=======================================

=======================================
INICIO FICHERO >> ./public/chart.min.js
=======================================
// Chart.js v4.4.0 (minificado - copiado localmente)
// (truncado aquí por tamaño, usar archivo real)
=======================================
FIN FICHERO >> ./public/chart.min.js
=======================================

=======================================
INICIO FICHERO >> ./public/i18n/es.json
=======================================
{
  "welcome": "Bienvenido a la App QA",
  "login": "Login",
  "profile": "Perfil",
  "settings": "Configuración",
  "dashboard": "Dashboard",
  "admin": "Admin",
  "dashboard_title": "Dashboard de métricas",
  "admin_panel": "Panel de Administración",
  "admin_only": "Solo accesible por administradores."
}
=======================================
FIN FICHERO >> ./public/i18n/es.json
=======================================

=======================================
INICIO FICHERO >> ./public/i18n/en.json
=======================================
{
  "welcome": "Welcome to the QA App",
  "login": "Login",
  "profile": "Profile",
  "settings": "Settings",
  "dashboard": "Dashboard",
  "admin": "Admin",
  "dashboard_title": "Metrics Dashboard",
  "admin_panel": "Admin Panel",
  "admin_only": "Only accessible to administrators."
}
=======================================
FIN FICHERO >> ./public/i18n/en.json
=======================================

=======================================
INICIO FICHERO >> ./public/main.js
=======================================
// JS central: logs, auth, i18n
function logAndAlert(msg) {
  alert(msg);
  sendLog({ type: 'alert', message: msg });
}

function sendLog(log) {
  fetch('/api/logs', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(log)
  });
}

// I18N
const lang = localStorage.getItem('lang') || 'es';
fetch(`/i18n/${lang}.json`)
  .then(res => res.json())
  .then(dict => {
    document.querySelectorAll('[data-i18n]').forEach(el => {
      const key = el.getAttribute('data-i18n');
      if (dict[key]) el.textContent = dict[key];
    });
  });
=======================================
FIN FICHERO >> ./public/main.js
=======================================

=======================================
INICIO FICHERO >> ./data/logs.json
=======================================
[]
=======================================
FIN FICHERO >> ./data/logs.json
=======================================
