=======================================
INICIO FICHERO >> ./backend/server.js
=======================================
// Servidor Express con endpoints extendidos
const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const fs = require('fs');
const app = express();
const PORT = 3001;

app.use(cors());
app.use(bodyParser.json());

let products = [
  { id: 1, name: 'Keyboard', price: 50 },
  { id: 2, name: 'Mouse', price: 30 },
];
let logs = [
  { id: 1, type: 'info', message: 'App started', timestamp: new Date().toISOString() }
];

// --- PRODUCTS ---
app.get('/api/products', (req, res) => res.json(products));
app.post('/api/products', (req, res) => {
  const product = { id: Date.now(), ...req.body };
  products.push(product);
  logs.push({ id: Date.now(), type: 'create', message: `Created product ${product.name}`, timestamp: new Date().toISOString() });
  res.json(product);
});
app.put('/api/products/:id', (req, res) => {
  const idx = products.findIndex(p => p.id == req.params.id);
  products[idx] = { ...products[idx], ...req.body };
  logs.push({ id: Date.now(), type: 'update', message: `Updated product ${products[idx].name}`, timestamp: new Date().toISOString() });
  res.json(products[idx]);
});
app.delete('/api/products/:id', (req, res) => {
  products = products.filter(p => p.id != req.params.id);
  logs.push({ id: Date.now(), type: 'delete', message: `Deleted product ${req.params.id}`, timestamp: new Date().toISOString() });
  res.json({ ok: true });
});

// --- LOGS ---
app.get('/api/logs', (req, res) => {
  const { type } = req.query;
  let filtered = logs;
  if (type) filtered = filtered.filter(log => log.type === type);
  res.json(filtered);
});

app.listen(PORT, () => console.log(`Backend listening on http://localhost:${PORT}`));
=======================================
FIN FICHERO >> ./backend/server.js
=======================================

=======================================
INICIO FICHERO >> ./frontend/src/pages/ProductsPage.jsx
=======================================
import React, { useEffect, useState } from 'react';

export default function ProductsPage() {
  const [products, setProducts] = useState([]);
  const [editing, setEditing] = useState({});
  const [newProduct, setNewProduct] = useState({ name: '', price: '' });

  useEffect(() => {
    fetch('/api/products').then(r => r.json()).then(setProducts);
  }, []);

  const saveEdit = (id) => {
    fetch(`/api/products/${id}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(editing[id])
    }).then(() => {
      setEditing(p => {
        const { [id]: _, ...rest } = p;
        return rest;
      });
      return fetch('/api/products').then(r => r.json()).then(setProducts);
    });
  };

  const deleteProduct = (id) => {
    fetch(`/api/products/${id}`, { method: 'DELETE' })
      .then(() => setProducts(p => p.filter(prod => prod.id !== id)));
  };

  const addProduct = () => {
    fetch('/api/products', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(newProduct)
    }).then(() => {
      setNewProduct({ name: '', price: '' });
      return fetch('/api/products').then(r => r.json()).then(setProducts);
    });
  };

  const exportCSV = () => {
    const csv = ['id,name,price', ...products.map(p => `${p.id},${p.name},${p.price}`)].join('\n');
    const blob = new Blob([csv], { type: 'text/csv' });
    const a = document.createElement('a');
    a.href = URL.createObjectURL(blob);
    a.download = 'products.csv';
    a.click();
  };

  return (
    <div>
      <h2>Products</h2>
      <button qa-id="btn-export-csv" onClick={exportCSV}>Export CSV</button>
      <table>
        <thead>
          <tr><th>ID</th><th>Name</th><th>Price</th><th>Actions</th></tr>
        </thead>
        <tbody>
          {products.map(prod => (
            <tr key={prod.id}>
              <td>{prod.id}</td>
              <td>
                <input
                  qa-id={`edit-name-${prod.id}`}
                  value={editing[prod.id]?.name ?? prod.name}
                  onChange={e => setEditing({ ...editing, [prod.id]: { ...prod, name: e.target.value } })}
                />
              </td>
              <td>
                <input
                  qa-id={`edit-price-${prod.id}`}
                  value={editing[prod.id]?.price ?? prod.price}
                  onChange={e => setEditing({ ...editing, [prod.id]: { ...prod, price: e.target.value } })}
                />
              </td>
              <td>
                <button qa-id={`btn-save-${prod.id}`} onClick={() => saveEdit(prod.id)}>Save</button>
                <button qa-id={`btn-delete-${prod.id}`} onClick={() => deleteProduct(prod.id)}>Delete</button>
              </td>
            </tr>
          ))}
          <tr>
            <td>New</td>
            <td><input qa-id="new-name" value={newProduct.name} onChange={e => setNewProduct(p => ({ ...p, name: e.target.value }))} /></td>
            <td><input qa-id="new-price" value={newProduct.price} onChange={e => setNewProduct(p => ({ ...p, price: e.target.value }))} /></td>
            <td><button qa-id="btn-add-product" onClick={addProduct}>Add Product</button></td>
          </tr>
        </tbody>
      </table>
    </div>
  );
}
=======================================
FIN FICHERO >> ./frontend/src/pages/ProductsPage.jsx
=======================================

=======================================
INICIO FICHERO >> ./frontend/src/pages/LogsPage.jsx
=======================================
import React, { useEffect, useState } from 'react';

export default function LogsPage() {
  const [logs, setLogs] = useState([]);
  const [type, setType] = useState('');

  useEffect(() => {
    fetch(`/api/logs${type ? `?type=${type}` : ''}`).then(r => r.json()).then(setLogs);
  }, [type]);

  return (
    <div>
      <h2>Logs</h2>
      <label>
        Filter by type:
        <select qa-id="select-log-type" value={type} onChange={e => setType(e.target.value)}>
          <option value="">All</option>
          <option value="create">Create</option>
          <option value="update">Update</option>
          <option value="delete">Delete</option>
        </select>
      </label>
      <ul>
        {logs.map(log => (
          <li key={log.id} qa-id={`log-${log.id}`}>
            [{log.type.toUpperCase()}] {log.message} ({new Date(log.timestamp).toLocaleString()})
          </li>
        ))}
      </ul>
    </div>
  );
}
=======================================
FIN FICHERO >> ./frontend/src/pages/LogsPage.jsx
=======================================
