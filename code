=======================================
INICIO FICHERO >> ./frontend/src/routes/index.tsx
=======================================
// Página de navegación principal con layout
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom'
import Dashboard from './Dashboard'
import Users from './Users'
import Products from './Products'
import Logs from './Logs'
import Settings from './Settings'
import Support from './Support'
import Rating from './Rating'
import Login from './Login'
import NotFound from './NotFound'
import Layout from '../components/Layout'

const AppRoutes = () => (
  <Router>
    <Routes>
      <Route path="/login" element={<Login />} />
      <Route element={<Layout />}>
        <Route path="/" element={<Navigate to="/dashboard" />} />
        <Route path="/dashboard" element={<Dashboard />} />
        <Route path="/users" element={<Users />} />
        <Route path="/products" element={<Products />} />
        <Route path="/logs" element={<Logs />} />
        <Route path="/settings" element={<Settings />} />
        <Route path="/support" element={<Support />} />
        <Route path="/rating" element={<Rating />} />
      </Route>
      <Route path="*" element={<NotFound />} />
    </Routes>
  </Router>
)

export default AppRoutes
=======================================
FIN FICHERO >> ./frontend/src/routes/index.tsx
=======================================

=======================================
INICIO FICHERO >> ./frontend/src/components/Layout.tsx
=======================================
// Layout con menú lateral y navegación
import { Link, Outlet, useLocation } from 'react-router-dom'
import './Layout.css'

const menu = [
  { path: '/dashboard', label: 'Dashboard' },
  { path: '/users', label: 'Users' },
  { path: '/products', label: 'Products' },
  { path: '/logs', label: 'Logs' },
  { path: '/settings', label: 'Settings' },
  { path: '/support', label: 'Support' },
  { path: '/rating', label: 'Rating' },
]

export default function Layout() {
  const location = useLocation()
  return (
    <div className="layout">
      <aside className="sidebar">
        <h2>QA App</h2>
        <nav>
          <ul>
            {menu.map((item) => (
              <li key={item.path}>
                <Link
                  to={item.path}
                  className={location.pathname === item.path ? 'active' : ''}
                  data-qa-id={`nav-${item.label.toLowerCase()}`}
                >
                  {item.label}
                </Link>
              </li>
            ))}
          </ul>
        </nav>
      </aside>
      <main className="content">
        <Outlet />
      </main>
    </div>
  )
}
=======================================
FIN FICHERO >> ./frontend/src/components/Layout.tsx
=======================================

=======================================
INICIO FICHERO >> ./frontend/src/routes/Users.tsx
=======================================
// Página de usuarios (CRUD completo)
import { useState, useEffect } from 'react'

interface User {
  id: number
  name: string
  email: string
}

export default function Users() {
  const [users, setUsers] = useState<User[]>([])
  const [name, setName] = useState('')
  const [email, setEmail] = useState('')

  useEffect(() => {
    fetch('/api/users')
      .then((res) => res.json())
      .then(setUsers)
  }, [])

  const addUser = () => {
    fetch('/api/users', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ name, email }),
    })
      .then((res) => res.json())
      .then((newUser) => setUsers([...users, newUser]))
  }

  const deleteUser = (id: number) => {
    fetch(`/api/users/${id}`, { method: 'DELETE' }).then(() =>
      setUsers(users.filter((u) => u.id !== id))
    )
  }

  return (
    <div>
      <h1 data-qa-id="title-users">Usuarios</h1>
      <input placeholder="Nombre" value={name} onChange={(e) => setName(e.target.value)} />
      <input placeholder="Email" value={email} onChange={(e) => setEmail(e.target.value)} />
      <button onClick={addUser} data-qa-id="btn-add-user">Añadir</button>
      <ul>
        {users.map((user) => (
          <li key={user.id}>
            {user.name} ({user.email}){' '}
            <button onClick={() => deleteUser(user.id)} data-qa-id={`btn-del-user-${user.id}`}>
              Eliminar
            </button>
          </li>
        ))}
      </ul>
    </div>
  )
}
=======================================
FIN FICHERO >> ./frontend/src/routes/Users.tsx
=======================================

=======================================
INICIO FICHERO >> ./backend/server.js
=======================================
const express = require('express')
const cors = require('cors')
const bodyParser = require('body-parser')
const app = express()
const PORT = 3001

app.use(cors())
app.use(bodyParser.json())

let users = [{ id: 1, name: 'Juan', email: 'juan@test.com' }]

app.get('/api/users', (req, res) => {
  res.json(users)
})

app.post('/api/users', (req, res) => {
  const newUser = { id: Date.now(), ...req.body }
  users.push(newUser)
  res.json(newUser)
})

app.delete('/api/users/:id', (req, res) => {
  users = users.filter((u) => u.id != req.params.id)
  res.sendStatus(200)
})

app.listen(PORT, () => console.log(`API running on http://localhost:${PORT}`))
=======================================
FIN FICHERO >> ./backend/server.js
=======================================

=======================================
INICIO FICHERO >> ./docker-compose.yml
=======================================
version: '3.9'
services:
  backend:
    build: ./backend
    ports:
      - '3001:3001'
    volumes:
      - ./backend:/app
  frontend:
    build: ./frontend
    ports:
      - '5173:5173'
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm run dev
=======================================
FIN FICHERO >> ./docker-compose.yml
=======================================
