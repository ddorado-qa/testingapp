=======================================
INICIO FICHERO >> ./backend/index.js
=======================================
const express = require('express');
const cors = require('cors');
const db = require('./lib/db');
const users = require('./routes/users');
const products = require('./routes/products');

const app = express();
app.use(cors());
app.use(express.json());

app.use('/api/users', users);
app.use('/api/products', products);

// Iniciar servidor
const PORT = 3001;
app.listen(PORT, () => {
  console.log(`Backend API running on http://localhost:${PORT}`);
});
=======================================
FIN FICHERO >> ./backend/index.js
=======================================

=======================================
INICIO FICHERO >> ./backend/lib/db.js
=======================================
const Database = require('better-sqlite3');
const fs = require('fs');
const path = require('path');

const dbPath = path.join(__dirname, '../../data/app.db');
fs.mkdirSync(path.dirname(dbPath), { recursive: true });

const db = new Database(dbPath);

// Crear tabla users
db.exec(`
  CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    email TEXT NOT NULL UNIQUE,
    role TEXT DEFAULT 'user'
  );
`);

// Crear tabla products
db.exec(`
  CREATE TABLE IF NOT EXISTS products (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    price REAL NOT NULL,
    stock INTEGER DEFAULT 0
  );
`);

module.exports = db;
=======================================
FIN FICHERO >> ./backend/lib/db.js
=======================================

=======================================
INICIO FICHERO >> ./backend/routes/users.js
=======================================
const express = require('express');
const db = require('../lib/db');
const router = express.Router();

router.get('/', (req, res) => {
  const users = db.prepare('SELECT * FROM users').all();
  res.json(users);
});

router.post('/', (req, res) => {
  const { name, email, role } = req.body;
  const stmt = db.prepare('INSERT INTO users (name, email, role) VALUES (?, ?, ?)');
  const info = stmt.run(name, email, role);
  res.json({ id: info.lastInsertRowid });
});

router.put('/:id', (req, res) => {
  const { name, email, role } = req.body;
  const stmt = db.prepare('UPDATE users SET name=?, email=?, role=? WHERE id=?');
  stmt.run(name, email, role, req.params.id);
  res.json({ updated: true });
});

router.delete('/:id', (req, res) => {
  db.prepare('DELETE FROM users WHERE id=?').run(req.params.id);
  res.json({ deleted: true });
});

module.exports = router;
=======================================
FIN FICHERO >> ./backend/routes/users.js
=======================================

=======================================
INICIO FICHERO >> ./backend/routes/products.js
=======================================
const express = require('express');
const db = require('../lib/db');
const router = express.Router();

router.get('/', (req, res) => {
  const products = db.prepare('SELECT * FROM products').all();
  res.json(products);
});

router.post('/', (req, res) => {
  const { name, price, stock } = req.body;
  const stmt = db.prepare('INSERT INTO products (name, price, stock) VALUES (?, ?, ?)');
  const info = stmt.run(name, price, stock);
  res.json({ id: info.lastInsertRowid });
});

router.put('/:id', (req, res) => {
  const { name, price, stock } = req.body;
  const stmt = db.prepare('UPDATE products SET name=?, price=?, stock=? WHERE id=?');
  stmt.run(name, price, stock, req.params.id);
  res.json({ updated: true });
});

router.delete('/:id', (req, res) => {
  db.prepare('DELETE FROM products WHERE id=?').run(req.params.id);
  res.json({ deleted: true });
});

module.exports = router;
=======================================
FIN FICHERO >> ./backend/routes/products.js
=======================================
