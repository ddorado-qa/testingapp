=======================================
INICIO FICHERO >> ./tests/pages/base.page.ts
=======================================
// BasePage centraliza métodos comunes entre páginas
import { Page, Locator } from '@playwright/test';

export class BasePage {
  readonly page: Page;
  constructor(page: Page) {
    this.page = page;
  }

  async goto(path: string) {
    await this.page.goto(path);
  }

  async fillField(locator: Locator, value: string) {
    await locator.fill(value);
  }

  async clickButton(locator: Locator) {
    await locator.click();
  }

  async expectVisible(locator: Locator) {
    await locator.waitFor({ state: 'visible' });
  }
}
=======================================
FIN FICHERO >> ./tests/pages/base.page.ts
=======================================

=======================================
INICIO FICHERO >> ./tests/pages/users.page.ts
=======================================
import { Locator, Page } from '@playwright/test';
import { BasePage } from './base.page';

export class UsersPage extends BasePage {
  readonly nameInput: Locator;
  readonly emailInput: Locator;
  readonly roleSelect: Locator;
  readonly addButton: Locator;
  readonly userRows: Locator;

  constructor(page: Page) {
    super(page);
    this.nameInput = page.locator('input[placeholder="Name"]');
    this.emailInput = page.locator('input[placeholder="Email"]');
    this.roleSelect = page.locator('select');
    this.addButton = page.locator('button:has-text("Add")');
    this.userRows = page.locator('table tbody tr');
  }

  async goto() {
    await super.goto('/users');
  }

  async createUser(name: string, email: string, role: string = 'user') {
    await this.fillField(this.nameInput, name);
    await this.fillField(this.emailInput, email);
    await this.roleSelect.selectOption(role);
    await this.clickButton(this.addButton);
  }

  async deleteUserByIndex(index: number) {
    const deleteBtn = this.userRows.nth(index).locator('button:has-text("Delete")');
    await deleteBtn.click();
  }

  async getUsersCount() {
    return await this.userRows.count();
  }
}
=======================================
FIN FICHERO >> ./tests/pages/users.page.ts
=======================================

=======================================
INICIO FICHERO >> ./tests/pages/orders.page.ts
=======================================
import { Locator, Page } from '@playwright/test';
import { BasePage } from './base.page';

export class OrdersPage extends BasePage {
  readonly customerInput: Locator;
  readonly productInput: Locator;
  readonly quantityInput: Locator;
  readonly statusInput: Locator;
  readonly addButton: Locator;
  readonly orderRows: Locator;

  constructor(page: Page) {
    super(page);
    this.customerInput = page.locator('input[placeholder="Customer"]');
    this.productInput = page.locator('input[placeholder="Product"]');
    this.quantityInput = page.locator('input[placeholder="Quantity"]');
    this.statusInput = page.locator('input[placeholder="Status"]');
    this.addButton = page.locator('button:has-text("Add Order")');
    this.orderRows = page.locator('table tbody tr');
  }

  async goto() {
    await super.goto('/orders');
  }

  async createOrder(customer: string, product: string, quantity: number, status: string) {
    await this.fillField(this.customerInput, customer);
    await this.fillField(this.productInput, product);
    await this.fillField(this.quantityInput, quantity.toString());
    await this.fillField(this.statusInput, status);
    await this.clickButton(this.addButton);
  }

  async deleteOrderByIndex(index: number) {
    const deleteBtn = this.orderRows.nth(index).locator('button:has-text("Delete")');
    await deleteBtn.click();
  }

  async getOrdersCount() {
    return await this.orderRows.count();
  }
}
=======================================
FIN FICHERO >> ./tests/pages/orders.page.ts
=======================================

=======================================
INICIO FICHERO >> ./tests/flows/user.flows.ts
=======================================
import { Page, expect } from '@playwright/test';
import { UsersPage } from '../pages/users.page';

export async function createAndDeleteUserFlow(page: Page) {
  const usersPage = new UsersPage(page);

  await usersPage.goto();
  const initialCount = await usersPage.getUsersCount();

  await usersPage.createUser('Test User', 'test@example.com');
  await expect(usersPage.userRows).toHaveCount(initialCount + 1);

  await usersPage.deleteUserByIndex(0);
  await expect(usersPage.userRows).toHaveCount(initialCount);
}
=======================================
FIN FICHERO >> ./tests/flows/user.flows.ts
=======================================

=======================================
INICIO FICHERO >> ./tests/flows/order.flows.ts
=======================================
import { Page, expect } from '@playwright/test';
import { OrdersPage } from '../pages/orders.page';

export async function createAndDeleteOrderFlow(page: Page) {
  const ordersPage = new OrdersPage(page);

  await ordersPage.goto();
  const initialCount = await ordersPage.getOrdersCount();

  await ordersPage.createOrder('Test Customer', 'Test Product', 5, 'Pending');
  await expect(ordersPage.orderRows).toHaveCount(initialCount + 1);

  await ordersPage.deleteOrderByIndex(0);
  await expect(ordersPage.orderRows).toHaveCount(initialCount);
}
=======================================
FIN FICHERO >> ./tests/flows/order.flows.ts
=======================================

=======================================
INICIO FICHERO >> ./tests/e2e/users.spec.ts
=======================================
import { test } from '@playwright/test';
import { createAndDeleteUserFlow } from '../flows/user.flows';

test('Crear y eliminar usuario', async ({ page }) => {
  await createAndDeleteUserFlow(page);
});
=======================================
FIN FICHERO >> ./tests/e2e/users.spec.ts
=======================================

=======================================
INICIO FICHERO >> ./tests/e2e/orders.spec.ts
=======================================
import { test } from '@playwright/test';
import { createAndDeleteOrderFlow } from '../flows/order.flows';

test('Crear y eliminar pedido', async ({ page }) => {
  await createAndDeleteOrderFlow(page);
});
=======================================
FIN FICHERO >> ./tests/e2e/orders.spec.ts
=======================================

=======================================
INICIO FICHERO >> ./tests/e2e/flows.spec.ts
=======================================
import { test } from '@playwright/test';
import { createAndDeleteUserFlow } from '../flows/user.flows';
import { createAndDeleteOrderFlow } from '../flows/order.flows';

test('Flujo completo: crear usuario y pedido', async ({ page }) => {
  await createAndDeleteUserFlow(page);
  await createAndDeleteOrderFlow(page);
});
=======================================
FIN FICHERO >> ./tests/e2e/flows.spec.ts
=======================================
